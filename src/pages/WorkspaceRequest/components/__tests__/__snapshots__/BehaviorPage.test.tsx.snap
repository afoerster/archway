// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BehaviorPage renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BehaviorPage
    onChange={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3
          style={
            Object {
              "display": "inline-block",
              "marginRight": 7,
            }
          }
        >
          What kind of behavior should we manage?
        </h3>,
        <Tooltip
          arrowPointAtCenter={false}
          autoAdjustOverflow={true}
          mouseEnterDelay={0.1}
          mouseLeaveDelay={0.1}
          placement="top"
          prefixCls="ant-tooltip"
          title="Heimdali will set up a structure that enables your team to work on a workspace in a certain way. See descriptions below for more information"
          transitionName="zoom-big-fast"
        >
          <Icon
            theme="twoTone"
            type="question-circle"
          />
        </Tooltip>,
        <Row
          gutter={25}
          justify="center"
          style={
            Object {
              "marginBottom": 25,
              "marginTop": 25,
            }
          }
          type="flex"
        >
          <Col
            lg={6}
            span={12}
            style={
              Object {
                "display": "flex",
              }
            }
          >
            <Behavior
              behaviorKey="simple"
              description="A simple place for multiple users to collaborate on a solution."
              icon="team"
              onChange={[Function]}
              selected={false}
              title="Simple"
              useCases={
                Array [
                  "brainstorming",
                  "evaluation",
                  "prototypes",
                ]
              }
            />
          </Col>
          <Col
            lg={6}
            span={12}
            style={
              Object {
                "display": "flex",
              }
            }
          >
            <Behavior
              behaviorKey="structured"
              description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
              icon="deployment-unit"
              onChange={[Function]}
              selected={false}
              title="Structured"
              useCases={
                Array [
                  "publishings",
                  "data assets",
                  "external interfacing",
                ]
              }
            />
          </Col>
        </Row>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "What kind of behavior should we manage?",
          "style": Object {
            "display": "inline-block",
            "marginRight": 7,
          },
        },
        "ref": null,
        "rendered": "What kind of behavior should we manage?",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "arrowPointAtCenter": false,
          "autoAdjustOverflow": true,
          "children": <Icon
            theme="twoTone"
            type="question-circle"
          />,
          "mouseEnterDelay": 0.1,
          "mouseLeaveDelay": 0.1,
          "placement": "top",
          "prefixCls": "ant-tooltip",
          "title": "Heimdali will set up a structure that enables your team to work on a workspace in a certain way. See descriptions below for more information",
          "transitionName": "zoom-big-fast",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "theme": "twoTone",
            "type": "question-circle",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Col
              lg={6}
              span={12}
              style={
                Object {
                  "display": "flex",
                }
              }
            >
              <Behavior
                behaviorKey="simple"
                description="A simple place for multiple users to collaborate on a solution."
                icon="team"
                onChange={[Function]}
                selected={false}
                title="Simple"
                useCases={
                  Array [
                    "brainstorming",
                    "evaluation",
                    "prototypes",
                  ]
                }
              />
            </Col>,
            <Col
              lg={6}
              span={12}
              style={
                Object {
                  "display": "flex",
                }
              }
            >
              <Behavior
                behaviorKey="structured"
                description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
                icon="deployment-unit"
                onChange={[Function]}
                selected={false}
                title="Structured"
                useCases={
                  Array [
                    "publishings",
                    "data assets",
                    "external interfacing",
                  ]
                }
              />
            </Col>,
          ],
          "gutter": 25,
          "justify": "center",
          "style": Object {
            "marginBottom": 25,
            "marginTop": 25,
          },
          "type": "flex",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Behavior
                behaviorKey="simple"
                description="A simple place for multiple users to collaborate on a solution."
                icon="team"
                onChange={[Function]}
                selected={false}
                title="Simple"
                useCases={
                  Array [
                    "brainstorming",
                    "evaluation",
                    "prototypes",
                  ]
                }
              />,
              "lg": 6,
              "span": 12,
              "style": Object {
                "display": "flex",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "behaviorKey": "simple",
                "description": "A simple place for multiple users to collaborate on a solution.",
                "icon": "team",
                "onChange": [Function],
                "selected": false,
                "title": "Simple",
                "useCases": Array [
                  "brainstorming",
                  "evaluation",
                  "prototypes",
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Behavior
                behaviorKey="structured"
                description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
                icon="deployment-unit"
                onChange={[Function]}
                selected={false}
                title="Structured"
                useCases={
                  Array [
                    "publishings",
                    "data assets",
                    "external interfacing",
                  ]
                }
              />,
              "lg": 6,
              "span": 12,
              "style": Object {
                "display": "flex",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "behaviorKey": "structured",
                "description": "Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data.",
                "icon": "deployment-unit",
                "onChange": [Function],
                "selected": false,
                "title": "Structured",
                "useCases": Array [
                  "publishings",
                  "data assets",
                  "external interfacing",
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3
            style={
              Object {
                "display": "inline-block",
                "marginRight": 7,
              }
            }
          >
            What kind of behavior should we manage?
          </h3>,
          <Tooltip
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            placement="top"
            prefixCls="ant-tooltip"
            title="Heimdali will set up a structure that enables your team to work on a workspace in a certain way. See descriptions below for more information"
            transitionName="zoom-big-fast"
          >
            <Icon
              theme="twoTone"
              type="question-circle"
            />
          </Tooltip>,
          <Row
            gutter={25}
            justify="center"
            style={
              Object {
                "marginBottom": 25,
                "marginTop": 25,
              }
            }
            type="flex"
          >
            <Col
              lg={6}
              span={12}
              style={
                Object {
                  "display": "flex",
                }
              }
            >
              <Behavior
                behaviorKey="simple"
                description="A simple place for multiple users to collaborate on a solution."
                icon="team"
                onChange={[Function]}
                selected={false}
                title="Simple"
                useCases={
                  Array [
                    "brainstorming",
                    "evaluation",
                    "prototypes",
                  ]
                }
              />
            </Col>
            <Col
              lg={6}
              span={12}
              style={
                Object {
                  "display": "flex",
                }
              }
            >
              <Behavior
                behaviorKey="structured"
                description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
                icon="deployment-unit"
                onChange={[Function]}
                selected={false}
                title="Structured"
                useCases={
                  Array [
                    "publishings",
                    "data assets",
                    "external interfacing",
                  ]
                }
              />
            </Col>
          </Row>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "What kind of behavior should we manage?",
            "style": Object {
              "display": "inline-block",
              "marginRight": 7,
            },
          },
          "ref": null,
          "rendered": "What kind of behavior should we manage?",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "arrowPointAtCenter": false,
            "autoAdjustOverflow": true,
            "children": <Icon
              theme="twoTone"
              type="question-circle"
            />,
            "mouseEnterDelay": 0.1,
            "mouseLeaveDelay": 0.1,
            "placement": "top",
            "prefixCls": "ant-tooltip",
            "title": "Heimdali will set up a structure that enables your team to work on a workspace in a certain way. See descriptions below for more information",
            "transitionName": "zoom-big-fast",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "theme": "twoTone",
              "type": "question-circle",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Col
                lg={6}
                span={12}
                style={
                  Object {
                    "display": "flex",
                  }
                }
              >
                <Behavior
                  behaviorKey="simple"
                  description="A simple place for multiple users to collaborate on a solution."
                  icon="team"
                  onChange={[Function]}
                  selected={false}
                  title="Simple"
                  useCases={
                    Array [
                      "brainstorming",
                      "evaluation",
                      "prototypes",
                    ]
                  }
                />
              </Col>,
              <Col
                lg={6}
                span={12}
                style={
                  Object {
                    "display": "flex",
                  }
                }
              >
                <Behavior
                  behaviorKey="structured"
                  description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
                  icon="deployment-unit"
                  onChange={[Function]}
                  selected={false}
                  title="Structured"
                  useCases={
                    Array [
                      "publishings",
                      "data assets",
                      "external interfacing",
                    ]
                  }
                />
              </Col>,
            ],
            "gutter": 25,
            "justify": "center",
            "style": Object {
              "marginBottom": 25,
              "marginTop": 25,
            },
            "type": "flex",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Behavior
                  behaviorKey="simple"
                  description="A simple place for multiple users to collaborate on a solution."
                  icon="team"
                  onChange={[Function]}
                  selected={false}
                  title="Simple"
                  useCases={
                    Array [
                      "brainstorming",
                      "evaluation",
                      "prototypes",
                    ]
                  }
                />,
                "lg": 6,
                "span": 12,
                "style": Object {
                  "display": "flex",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "behaviorKey": "simple",
                  "description": "A simple place for multiple users to collaborate on a solution.",
                  "icon": "team",
                  "onChange": [Function],
                  "selected": false,
                  "title": "Simple",
                  "useCases": Array [
                    "brainstorming",
                    "evaluation",
                    "prototypes",
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Behavior
                  behaviorKey="structured"
                  description="Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data."
                  icon="deployment-unit"
                  onChange={[Function]}
                  selected={false}
                  title="Structured"
                  useCases={
                    Array [
                      "publishings",
                      "data assets",
                      "external interfacing",
                    ]
                  }
                />,
                "lg": 6,
                "span": 12,
                "style": Object {
                  "display": "flex",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "behaviorKey": "structured",
                  "description": "Data moves through three steps: raw, staging, modeled. Each step represents a more \\"structured\\" version of the data.",
                  "icon": "deployment-unit",
                  "onChange": [Function],
                  "selected": false,
                  "title": "Structured",
                  "useCases": Array [
                    "publishings",
                    "data assets",
                    "external interfacing",
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
